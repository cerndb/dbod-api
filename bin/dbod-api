#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2015, CERN
# This software is distributed under the terms of the GNU General Public
# Licence version 3 (GPL Version 3), copied verbatim in the file "LICENSE".
# In applying this license, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as Intergovernmental Organization
# or submit itself to any jurisdiction.

"""
DB On Demand metadata REST API server
"""

import ConfigParser
import sys, traceback
from tornado.options import parse_command_line, options
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop
from dbod.api.handlers import *
from dbod.config import config

import logging

def main():
    """ Main body """

    # Set up log file and level.
    options.log_file_prefix = config.get('logging', 'path')
    options.logging = config.get('logging', 'level')
    options.log_to_stderr = config.getboolean('logging', 'stderr')

    # Parse server command line and set up logging defaults, if necessary
    parse_command_line()

    logging.info("Defining application (url, handler) pairs")
    application = tornado.web.Application([
            (r"/", DocHandler),
            (r"/api/v1/entity/([^/]+)", EntityHandler),
            (r"/api/v1/entity/alias/([^/]+)", FunctionalAliasHandler),
            (r"/api/v1/host/([^/]+)", HostHandler),
            (r"/api/v1/host/aliases/([^/]+)", HostAliases),
            (r"/api/v1/metadata/(?P<class>[^\/]+)/?(?P<name>[^\/]+)?", Metadata),
            (r"/api/v1/rundeck/resources.xml", RundeckResources),
            ], debug=config.getboolean('tornado', 'debug'))

    logging.info("Configuring HTTP server")
    if (config.has_section('ssl')):
        http_server = HTTPServer(application,
                ssl_options = {
                    "certfile" : config.get('ssl', 'hostcert') ,
                    "keyfile" : config.get('ssl', 'hostkey'),
                    })
    else:
        http_server = HTTPServer(application)
        logging.info("Host certificate undefined, SSL is DISABLED")

    http_server.listen(config.get('server', 'port'))

    logging.info("Starting application")
    IOLoop.instance().start()

if __name__ == "__main__":
    main()
