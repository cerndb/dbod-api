#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2015, CERN
# This software is distributed under the terms of the GNU General Public
# Licence version 3 (GPL Version 3), copied verbatim in the file "LICENSE".
# In applying this license, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as Intergovernmental Organization
# or submit itself to any jurisdiction.

"""
DB On Demand metadata REST API server
"""

import ConfigParser
import sys, traceback
from tornado.options import parse_command_line, options
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop
from dbod.api.handlers import *
from dbod.api.instancehandlers import *
from dbod.config import CONFIG

import logging

def main():
    """ Main body """

    # Set up log file and level.
    options.log_file_prefix = CONFIG.get('log_file')
    options.logging = 'debug'
    options.log_to_stderr = True

    # Parse server command line and set up logging defaults, if necessary
    parse_command_line()

    logging.info("Defining application (url, handler) pairs")
    application = tornado.web.Application([
            (r"/", DocHandler),
            (r"/api/v1/entity/metadata/([^/]+)", EntityHandler),
            (r"/api/v1/entity/alias/([^/]+)", FunctionalAliasHandler),
            (r"/api/v1/host/metadata/([^/]+)", HostHandler),
            (r"/api/v1/fim/resource/([^/]+)", FimResourceHandler),
            (r"/api/v1/entity/all/", InstanceListAllHandler),
            (r"/api/v1/entity/expired/", InstanceListExpiredHandler),
            #(r"/api/v1/entity/access/([^/]+)/([^/]+)", ),
            (r"/api/v1/entity/([^/]+)", InstanceHandler),
            (r"/api/v1/entity/host/([^/]+)", InstanceListByHostHandler),
            ], debug=True)

    logging.info("Configuring HTTP server")
    http_server = HTTPServer(application,
            ssl_options = {
                "certfile" : CONFIG.get('hostcert') ,
                "keyfile" : CONFIG.get('hostkey'),
                })

    http_server.listen(CONFIG.get('app_port'))

    logging.info("Starting application")
    IOLoop.instance().start()

if __name__ == "__main__":
    main()
